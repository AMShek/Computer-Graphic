#include "stdafx.h"
#include <windows.h>    
#include <math.h>     
#include <gl\glut.h> 

GLint winWidth = 800, winHeight = 800; //set the sizeo of window
GLfloat xo = 0.0, yo = 5.0, zo = 5.0; // set the origin point
GLfloat xref = 0.0, yref = 0.0, zref = 0.0; //set the reference point(eye)
GLfloat Vx = 0.0, Vy = 1.0, Vz = 0.0;
int NUMPOINTS = 0;

void myDisplay();

class Point{
	public:
		float x, y;
		void setxy(float x2, float y2){
			x = x2;
			y = y2;
		}
		Point  operator&(const Point & rPoint){
			x = rPoint.x;
			y = rPoint.y;
			return *this;
		}
};
Point points[4];

void myInit(){
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glColor3f(0.0f, 0.0, 0.0);
	glPointSize(9.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0, winWidth, 0.0, winHeight);
}

void reshapeFcn(GLint newWidth, GLint newHight){
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0, newWidth, 0, newHight);
	glFlush();
}

void drawDot(Point pt){
	glBegin(GL_POINTS);
	glVertex2f(pt.x, pt.y);
	glEnd();
	glFlush();
}

void drawLine(Point p1, Point p2){
	glBegin(GL_LINES);
	glVertex2f(p1.x, p1.y);
	glVertex2f(p2.x, p2.y);
	glEnd();
	glFlush();
}

Point drawBezier(Point A, Point B, Point C, Point D, double t){
	Point P;
	double a1 = pow((1 - t), 3);
	double a2 = pow((1 - t), 2) * 3 * t;
	double a3 = 3 * t*t*(1 - t);
	double a4 = t * t*t;

	P.x = a1 * A.x + a2 * B.x + a3 * C.x + a4 * D.x;
	P.y = a1 * A.y + a2 * B.y + a3 * C.y + a4 * D.y;
	return P;
}

void myMouse(int button, int state, int x, int y){
	if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN){
		points[NUMPOINTS].setxy((float)x, (float)(winHeight- y));
		NUMPOINTS++;
		if (NUMPOINTS == 4){
			glColor3f(0.0, 0.0, 1.0);

			drawDot(points[0]);
			drawDot(points[1]);
			drawDot(points[2]);
			drawDot(points[3]);
			glColor3f(1.0, 1.0, 0.0);
			drawLine(points[0],points[1]);
			drawLine(points[1],points[2]);
			drawLine(points[2],points[3]);
			glColor3f(0.0, 1.0, 0.0);
			Point POld =points[0];
			for (double t = 0.0; t <= 1.0; t += 0.1){
				Point P = drawBezier(points[0],points[1],points[2],points[3], t);
				drawLine(POld, P);
				POld = P;
			}
			glColor3f(0.0, 1.0, 0.0);
			NUMPOINTS = 0;
		}
	}
}

void myDisplay(){
	glClear(GL_COLOR_BUFFER_BIT);
	glFlush();
}

int main(int argc, char * agrv[]){
	glutInit(&argc, agrv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowPosition(winWidth / 2, winHeight / 2);
	glutInitWindowSize(winWidth, winHeight);
	glutCreateWindow("Bezier Curve");
	myInit();
	glutMouseFunc(myMouse);
	glutDisplayFunc(myDisplay);
	glutReshapeFunc(reshapeFcn);
	glutMainLoop();
}

